## I/O ##

.toFile : get file
	java.lang.String         →  new File($expr$)   [IMPORT java.io.File]

.toURL : get URL
	java.lang.String         →  new URL($expr$)   [IMPORT java.net.URL]

.toURI : get URI
	java.lang.String         →  new URI($expr$)   [IMPORT java.net.URI]

.lines : get lines
	java.io.File             →  Source.fromFile($expr$, $enc::"\"UTF-8\""$).getLines   [IMPORT scala.io.Source]
	java.nio.file.Path       →  Files.readAllLines($expr$, Charset.forName($encoding::"\"UTF-8\""$))   [IMPORT java.nio.file.Files] [IMPORT java.nio.charset.Charset]
	java.io.InputStream      →  Source.fromInputStream($expr$, $enc::"\"UTF-8\""$).getLines   [IMPORT scala.io.Source]
	java.net.URL             →  Source.fromURL($expr$, $enc::"\"UTF-8\""$).getLines   [IMPORT scala.io.Source]
	java.lang.String         →  $expr$.split("\\r?\\n")

.content : get content
	java.io.File             →  new String(Files.readAllBytes($expr$.toPath), $encoding::"\"UTF-8\""$)   [IMPORT java.nio.file.Files]
	java.nio.file.Path       →  new String(Files.readAllBytes($expr$), $encoding::"\"UTF-8\""$)   [IMPORT java.nio.file.Files]
	java.io.InputStream      →  new Scanner($expr$, $encoding::"\"UTF-8\""$).useDelimiter("\\\\A").next()   [IMPORT java.util.Scanner]
	java.net.URL             →  new Scanner($expr$.openStream(), $encoding::"\"UTF-8\""$).useDelimiter("\\A").next()   [IMPORT java.util.Scanner]

.inputStream : get input stream
	java.lang.String         →  new ByteArrayInputStream($expr$.getBytes)   [IMPORT java.io.ByteArrayInputStream]
	java.io.File             →  new FileInputStream($expr$)   [IMPORT java.io.FileInputStream]
	java.net.URL             →  $expr$.openStream()

.outputStream : get output stream
	java.io.File             →  new FileOutputStream($expr$)   [IMPORT java.io.FileOutputStream]

.bufferedReader : get BufferedReader
	java.io.File             →  new BufferedReader(new FileReader($expr$))   [IMPORT java.io.BufferedReader] [IMPORT java.io.FileReader]
	java.io.InputStream      →  new BufferedReader(new InputStreamReader($expr$))   [IMPORT java.io.BufferedReader] [IMPORT java.io.InputStreamReader]
	java.net.URL             →  new BufferedReader(new InputStreamReader($expr$.openStream()))   [IMPORT java.io.BufferedReader] [IMPORT java.io.InputStreamReader]

.bufferedWriter : get BufferedWriter
	java.io.File             →  new BufferedWriter(new FileWriter($expr$))   [IMPORT java.io.BufferedWriter] [IMPORT java.io.FileWriter]
	java.io.OutputStream     →  new BufferedWriter(new OutputStreamWriter($expr$))   [IMPORT java.io.BufferedWriter] [IMPORT java.io.OutputStreamWriter]

.printStream : get PrintStream
	java.io.File             →  new PrintStream($expr$)   [IMPORT java.io.PrintStream]
	java.io.OutputStream     →  new PrintStream($expr$)   [IMPORT java.io.PrintStream]


## others ##

.sout : print variable to System.out
	scala.Array              →  println($expr$.mkString("(", ", ", ")"))
	#NON_VOID                 →  println($expr$)

.soutv : print variable to System.out
	scala.Array              →  println("$escapedExpr*:escapeString(expr)$ = " + $expr$.mkString("(", ", ", ")"))
	NON_VOID                 →  println("$escapedExpr*:escapeString(expr)$ = " + $expr$)
