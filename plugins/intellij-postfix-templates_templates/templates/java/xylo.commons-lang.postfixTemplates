## Templates for Apache commons-lang3 ##

## ArrayUtils

.removeElements : removeElements
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.removeElements($expr$, $arg$)

.subarray : subarray
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.subarray($expr$, $arg$)

.toPrimitive : toPrimitive
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.toPrimitive($expr$, $arg$)
	java.lang.Object [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.toPrimitive($expr$)

.isSorted : isSorted
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.isSorted($expr$, $arg$)

.insert : insert
	INT [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.insert($expr$, $arg$)

.toMap : toMap
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.toMap($expr$)

.lastIndexOf : lastIndexOf
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.lastIndexOf($expr$, $arg$)

.addAll : addAll
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.addAll($expr$, $arg$)

.shift : shift
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.shift($expr$, $arg$)

.isNotEmpty : isNotEmpty
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.isNotEmpty($expr$)

.toObject : toObject
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.toObject($expr$)

.indexesOf : indexesOf
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.indexesOf($expr$, $arg$)

.getLength : getLength
	java.lang.Object [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.getLength($expr$)

.reverse : reverse
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.reverse($expr$, $arg$)

.isSameType : isSameType
	java.lang.Object [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.isSameType($expr$, $arg$)

.remove : remove
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.remove($expr$, $arg$)

.isArrayIndexValid : isArrayIndexValid
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.isArrayIndexValid($expr$, $arg$)

.isSameLength : isSameLength
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.isSameLength($expr$, $arg$)
	java.lang.Object [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.isSameLength($expr$, $arg$)

.clone : clone
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.clone($expr$)

.removeElement : removeElement
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.removeElement($expr$, $arg$)

.toArray : toArray
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.toArray($expr$)

.toStringArray : toStringArray
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.toStringArray($expr$, $arg$)

.shuffle : shuffle
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.shuffle($expr$, $arg$)

.swap : swap
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.swap($expr$, $arg$)

.addFirst : addFirst
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.addFirst($expr$, $arg$)

.toString : toString
	java.lang.Object [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.toString($expr$, $arg$)

.get : get
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.get($expr$, $arg$)

.nullToEmpty : nullToEmpty
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.nullToEmpty($expr$, $arg$)

.removeAll : removeAll
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.removeAll($expr$, $arg$)

.removeAllOccurrences : removeAllOccurrences
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.removeAllOccurrences($expr$, $arg$)

.contains : contains
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.contains($expr$, $arg$)

.isEmpty : isEmpty
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.isEmpty($expr$)

.add : add
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.add($expr$, $arg$)

.indexOf : indexOf
	ARRAY [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.indexOf($expr$, $arg$)

.hashCode : hashCode
	java.lang.Object [org.apache.commons.lang3.ArrayUtils]  →  org.apache.commons.lang3.ArrayUtils.hashCode($expr$)


## BooleanUtils

.toInteger : toInteger
	java.lang.Boolean [org.apache.commons.lang3.BooleanUtils]  →  org.apache.commons.lang3.BooleanUtils.toInteger($expr$, $arg$)
	BOOLEAN [org.apache.commons.lang3.BooleanUtils]  →  org.apache.commons.lang3.BooleanUtils.toInteger($expr$, $arg$)

.toBooleanObject : toBooleanObject
	java.lang.String [org.apache.commons.lang3.BooleanUtils]  →  org.apache.commons.lang3.BooleanUtils.toBooleanObject($expr$, $arg$)
	java.lang.Integer [org.apache.commons.lang3.BooleanUtils]  →  org.apache.commons.lang3.BooleanUtils.toBooleanObject($expr$, $arg$)
	INT [org.apache.commons.lang3.BooleanUtils]  →  org.apache.commons.lang3.BooleanUtils.toBooleanObject($expr$, $arg$)

.toStringTrueFalse : toStringTrueFalse
	java.lang.Boolean [org.apache.commons.lang3.BooleanUtils]  →  org.apache.commons.lang3.BooleanUtils.toStringTrueFalse($expr$)
	BOOLEAN [org.apache.commons.lang3.BooleanUtils]  →  org.apache.commons.lang3.BooleanUtils.toStringTrueFalse($expr$)

.isNotFalse : isNotFalse
	java.lang.Boolean [org.apache.commons.lang3.BooleanUtils]  →  org.apache.commons.lang3.BooleanUtils.isNotFalse($expr$)

.or : or
	ARRAY [org.apache.commons.lang3.BooleanUtils]  →  org.apache.commons.lang3.BooleanUtils.or($expr$)

.toStringOnOff : toStringOnOff
	java.lang.Boolean [org.apache.commons.lang3.BooleanUtils]  →  org.apache.commons.lang3.BooleanUtils.toStringOnOff($expr$)
	BOOLEAN [org.apache.commons.lang3.BooleanUtils]  →  org.apache.commons.lang3.BooleanUtils.toStringOnOff($expr$)

.isNotTrue : isNotTrue
	java.lang.Boolean [org.apache.commons.lang3.BooleanUtils]  →  org.apache.commons.lang3.BooleanUtils.isNotTrue($expr$)

.toStringYesNo : toStringYesNo
	java.lang.Boolean [org.apache.commons.lang3.BooleanUtils]  →  org.apache.commons.lang3.BooleanUtils.toStringYesNo($expr$)
	BOOLEAN [org.apache.commons.lang3.BooleanUtils]  →  org.apache.commons.lang3.BooleanUtils.toStringYesNo($expr$)

.toBoolean : toBoolean
	java.lang.String [org.apache.commons.lang3.BooleanUtils]  →  org.apache.commons.lang3.BooleanUtils.toBoolean($expr$, $arg$)
	java.lang.Boolean [org.apache.commons.lang3.BooleanUtils]  →  org.apache.commons.lang3.BooleanUtils.toBoolean($expr$)
	java.lang.Integer [org.apache.commons.lang3.BooleanUtils]  →  org.apache.commons.lang3.BooleanUtils.toBoolean($expr$, $arg$)
	INT [org.apache.commons.lang3.BooleanUtils]  →  org.apache.commons.lang3.BooleanUtils.toBoolean($expr$, $arg$)

.negate : negate
	java.lang.Boolean [org.apache.commons.lang3.BooleanUtils]  →  org.apache.commons.lang3.BooleanUtils.negate($expr$)

.xor : xor
	ARRAY [org.apache.commons.lang3.BooleanUtils]  →  org.apache.commons.lang3.BooleanUtils.xor($expr$)

.isTrue : isTrue
	java.lang.Boolean [org.apache.commons.lang3.BooleanUtils]  →  org.apache.commons.lang3.BooleanUtils.isTrue($expr$)

.toString : toString
	java.lang.Boolean [org.apache.commons.lang3.BooleanUtils]  →  org.apache.commons.lang3.BooleanUtils.toString($expr$, $arg$)
	BOOLEAN [org.apache.commons.lang3.BooleanUtils]  →  org.apache.commons.lang3.BooleanUtils.toString($expr$, $arg$)

.toBooleanDefaultIfNull : toBooleanDefaultIfNull
	java.lang.Boolean [org.apache.commons.lang3.BooleanUtils]  →  org.apache.commons.lang3.BooleanUtils.toBooleanDefaultIfNull($expr$, $arg$)

.toIntegerObject : toIntegerObject
	java.lang.Boolean [org.apache.commons.lang3.BooleanUtils]  →  org.apache.commons.lang3.BooleanUtils.toIntegerObject($expr$, $arg$)
	BOOLEAN [org.apache.commons.lang3.BooleanUtils]  →  org.apache.commons.lang3.BooleanUtils.toIntegerObject($expr$, $arg$)

.compare : compare
	BOOLEAN [org.apache.commons.lang3.BooleanUtils]  →  org.apache.commons.lang3.BooleanUtils.compare($expr$, $arg$)

.and : and
	ARRAY [org.apache.commons.lang3.BooleanUtils]  →  org.apache.commons.lang3.BooleanUtils.and($expr$)

.isFalse : isFalse
	java.lang.Boolean [org.apache.commons.lang3.BooleanUtils]  →  org.apache.commons.lang3.BooleanUtils.isFalse($expr$)


## CharSetUtils

.count : count
	java.lang.String [org.apache.commons.lang3.CharSetUtils]  →  org.apache.commons.lang3.CharSetUtils.count($expr$, $arg$)

.keep : keep
	java.lang.String [org.apache.commons.lang3.CharSetUtils]  →  org.apache.commons.lang3.CharSetUtils.keep($expr$, $arg$)

.squeeze : squeeze
	java.lang.String [org.apache.commons.lang3.CharSetUtils]  →  org.apache.commons.lang3.CharSetUtils.squeeze($expr$, $arg$)

.delete : delete
	java.lang.String [org.apache.commons.lang3.CharSetUtils]  →  org.apache.commons.lang3.CharSetUtils.delete($expr$, $arg$)

.containsAny : containsAny
	java.lang.String [org.apache.commons.lang3.CharSetUtils]  →  org.apache.commons.lang3.CharSetUtils.containsAny($expr$, $arg$)


## CharUtils

.isAsciiControl : isAsciiControl
	CHAR [org.apache.commons.lang3.CharUtils]  →  org.apache.commons.lang3.CharUtils.isAsciiControl($expr$)

.isAsciiNumeric : isAsciiNumeric
	CHAR [org.apache.commons.lang3.CharUtils]  →  org.apache.commons.lang3.CharUtils.isAsciiNumeric($expr$)

.isAsciiAlphaUpper : isAsciiAlphaUpper
	CHAR [org.apache.commons.lang3.CharUtils]  →  org.apache.commons.lang3.CharUtils.isAsciiAlphaUpper($expr$)

.isAsciiAlphaLower : isAsciiAlphaLower
	CHAR [org.apache.commons.lang3.CharUtils]  →  org.apache.commons.lang3.CharUtils.isAsciiAlphaLower($expr$)

.toCharacterObject : toCharacterObject
	java.lang.String [org.apache.commons.lang3.CharUtils]  →  org.apache.commons.lang3.CharUtils.toCharacterObject($expr$)

.isAsciiPrintable : isAsciiPrintable
	CHAR [org.apache.commons.lang3.CharUtils]  →  org.apache.commons.lang3.CharUtils.isAsciiPrintable($expr$)

.toChar : toChar
	java.lang.String [org.apache.commons.lang3.CharUtils]  →  org.apache.commons.lang3.CharUtils.toChar($expr$, $arg$)
	java.lang.Character [org.apache.commons.lang3.CharUtils]  →  org.apache.commons.lang3.CharUtils.toChar($expr$, $arg$)

.toString : toString
	CHAR [org.apache.commons.lang3.CharUtils]  →  org.apache.commons.lang3.CharUtils.toString($expr$)
	java.lang.Character [org.apache.commons.lang3.CharUtils]  →  org.apache.commons.lang3.CharUtils.toString($expr$)

.unicodeEscaped : unicodeEscaped
	CHAR [org.apache.commons.lang3.CharUtils]  →  org.apache.commons.lang3.CharUtils.unicodeEscaped($expr$)
	java.lang.Character [org.apache.commons.lang3.CharUtils]  →  org.apache.commons.lang3.CharUtils.unicodeEscaped($expr$)

.isAsciiAlpha : isAsciiAlpha
	CHAR [org.apache.commons.lang3.CharUtils]  →  org.apache.commons.lang3.CharUtils.isAsciiAlpha($expr$)

.isAscii : isAscii
	CHAR [org.apache.commons.lang3.CharUtils]  →  org.apache.commons.lang3.CharUtils.isAscii($expr$)

.toIntValue : toIntValue
	CHAR [org.apache.commons.lang3.CharUtils]  →  org.apache.commons.lang3.CharUtils.toIntValue($expr$, $arg$)
	java.lang.Character [org.apache.commons.lang3.CharUtils]  →  org.apache.commons.lang3.CharUtils.toIntValue($expr$, $arg$)

.compare : compare
	CHAR [org.apache.commons.lang3.CharUtils]  →  org.apache.commons.lang3.CharUtils.compare($expr$, $arg$)

.isAsciiAlphanumeric : isAsciiAlphanumeric
	CHAR [org.apache.commons.lang3.CharUtils]  →  org.apache.commons.lang3.CharUtils.isAsciiAlphanumeric($expr$)


## ClassUtils

.isPrimitiveWrapper : isPrimitiveWrapper
	java.lang.Class [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.isPrimitiveWrapper($expr$)

.getCanonicalName : getCanonicalName
	java.lang.Class [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.getCanonicalName($expr$, $arg$)
	java.lang.Object [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.getCanonicalName($expr$, $arg$)

.getPublicMethod : getPublicMethod
	java.lang.Class [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.getPublicMethod($expr$, $arg$)

.toClass : toClass
	ARRAY [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.toClass($expr$)

.primitivesToWrappers : primitivesToWrappers
	ARRAY [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.primitivesToWrappers($expr$)

.getAllSuperclasses : getAllSuperclasses
	java.lang.Class [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.getAllSuperclasses($expr$)

.convertClassNamesToClasses : convertClassNamesToClasses
	java.util.List [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.convertClassNamesToClasses($expr$)

.getShortClassName : getShortClassName
	java.lang.String [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.getShortClassName($expr$)
	java.lang.Class [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.getShortClassName($expr$)
	java.lang.Object [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.getShortClassName($expr$, $arg$)

.wrappersToPrimitives : wrappersToPrimitives
	ARRAY [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.wrappersToPrimitives($expr$)

.isInnerClass : isInnerClass
	java.lang.Class [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.isInnerClass($expr$)

.hierarchy : hierarchy
	java.lang.Class [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.hierarchy($expr$, $arg$)

.getName : getName
	java.lang.Class [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.getName($expr$, $arg$)
	java.lang.Object [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.getName($expr$, $arg$)

.getShortCanonicalName : getShortCanonicalName
	java.lang.String [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.getShortCanonicalName($expr$)
	java.lang.Class [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.getShortCanonicalName($expr$)
	java.lang.Object [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.getShortCanonicalName($expr$, $arg$)

.isAssignable : isAssignable
	ARRAY [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.isAssignable($expr$, $arg$)
	java.lang.Class [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.isAssignable($expr$, $arg$)

.primitiveToWrapper : primitiveToWrapper
	java.lang.Class [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.primitiveToWrapper($expr$)

.getPackageCanonicalName : getPackageCanonicalName
	java.lang.String [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.getPackageCanonicalName($expr$)
	java.lang.Class [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.getPackageCanonicalName($expr$)
	java.lang.Object [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.getPackageCanonicalName($expr$, $arg$)

.getAllInterfaces : getAllInterfaces
	java.lang.Class [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.getAllInterfaces($expr$)

.wrapperToPrimitive : wrapperToPrimitive
	java.lang.Class [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.wrapperToPrimitive($expr$)

.isPrimitiveOrWrapper : isPrimitiveOrWrapper
	java.lang.Class [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.isPrimitiveOrWrapper($expr$)

.getPackageName : getPackageName
	java.lang.String [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.getPackageName($expr$)
	java.lang.Class [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.getPackageName($expr$)
	java.lang.Object [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.getPackageName($expr$, $arg$)

.getClass : getClass
	java.lang.String [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.getClass($expr$, $arg$)
	java.lang.ClassLoader [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.getClass($expr$, $arg$)

.getSimpleName : getSimpleName
	java.lang.Class [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.getSimpleName($expr$, $arg$)
	java.lang.Object [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.getSimpleName($expr$, $arg$)

.getAbbreviatedName : getAbbreviatedName
	java.lang.String [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.getAbbreviatedName($expr$, $arg$)
	java.lang.Class [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.getAbbreviatedName($expr$, $arg$)

.convertClassesToClassNames : convertClassesToClassNames
	java.util.List [org.apache.commons.lang3.ClassUtils]  →  org.apache.commons.lang3.ClassUtils.convertClassesToClassNames($expr$)


## LocaleUtils

.countriesByLanguage : countriesByLanguage
	java.lang.String [org.apache.commons.lang3.LocaleUtils]  →  org.apache.commons.lang3.LocaleUtils.countriesByLanguage($expr$)

.toLocale : toLocale
	java.lang.String [org.apache.commons.lang3.LocaleUtils]  →  org.apache.commons.lang3.LocaleUtils.toLocale($expr$)
	java.util.Locale [org.apache.commons.lang3.LocaleUtils]  →  org.apache.commons.lang3.LocaleUtils.toLocale($expr$)

.languagesByCountry : languagesByCountry
	java.lang.String [org.apache.commons.lang3.LocaleUtils]  →  org.apache.commons.lang3.LocaleUtils.languagesByCountry($expr$)

.isAvailableLocale : isAvailableLocale
	java.util.Locale [org.apache.commons.lang3.LocaleUtils]  →  org.apache.commons.lang3.LocaleUtils.isAvailableLocale($expr$)

.localeLookupList : localeLookupList
	java.util.Locale [org.apache.commons.lang3.LocaleUtils]  →  org.apache.commons.lang3.LocaleUtils.localeLookupList($expr$, $arg$)


## ObjectUtils

.allNull : allNull
	ARRAY [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.allNull($expr$)

.anyNull : anyNull
	ARRAY [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.anyNull($expr$)

.wait : wait
	java.lang.Object [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.wait($expr$, $arg$)

.getIfNull : getIfNull
	java.lang.Object [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.getIfNull($expr$, $arg$)

.anyNotNull : anyNotNull
	ARRAY [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.anyNotNull($expr$)

.allNotNull : allNotNull
	ARRAY [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.allNotNull($expr$)

.requireNonEmpty : requireNonEmpty
	java.lang.Object [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.requireNonEmpty($expr$, $arg$)

.isNotEmpty : isNotEmpty
	java.lang.Object [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.isNotEmpty($expr$)

.min : min
	ARRAY [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.min($expr$)

.getFirstNonNull : getFirstNonNull
	ARRAY [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.getFirstNonNull($expr$)

.firstNonNull : firstNonNull
	ARRAY [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.firstNonNull($expr$)

.defaultIfNull : defaultIfNull
	java.lang.Object [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.defaultIfNull($expr$, $arg$)

.identityToString : identityToString
	java.lang.Appendable [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.identityToString($expr$, $arg$)
	java.lang.Object [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.identityToString($expr$)
	java.lang.StringBuffer [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.identityToString($expr$, $arg$)
	java.lang.StringBuilder [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.identityToString($expr$, $arg$)

.max : max
	ARRAY [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.max($expr$)

.median : median
	ARRAY [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.median($expr$)
	java.util.Comparator [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.median($expr$, $arg$)

.clone : clone
	java.lang.Object [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.clone($expr$)

.mode : mode
	ARRAY [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.mode($expr$)

.toString : toString
	java.lang.Object [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.toString($expr$, $arg$)

.cloneIfPossible : cloneIfPossible
	java.lang.Object [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.cloneIfPossible($expr$)

.notEqual : notEqual
	java.lang.Object [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.notEqual($expr$, $arg$)

.isEmpty : isEmpty
	java.lang.Object [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.isEmpty($expr$)

.compare : compare
	java.lang.Comparable [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.compare($expr$, $arg$)

.CONST : CONST
	SHORT [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.CONST($expr$)
	FLOAT [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.CONST($expr$)
	CHAR [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.CONST($expr$)
	DOUBLE [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.CONST($expr$)
	INT [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.CONST($expr$)
	BYTE [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.CONST($expr$)
	java.lang.Object [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.CONST($expr$)
	BOOLEAN [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.CONST($expr$)
	LONG [org.apache.commons.lang3.ObjectUtils]  →  org.apache.commons.lang3.ObjectUtils.CONST($expr$)


## RegExUtils

.replaceFirst : replaceFirst
	java.lang.String [org.apache.commons.lang3.RegExUtils]  →  org.apache.commons.lang3.RegExUtils.replaceFirst($expr$, $arg$)

.replacePattern : replacePattern
	java.lang.String [org.apache.commons.lang3.RegExUtils]  →  org.apache.commons.lang3.RegExUtils.replacePattern($expr$, $arg$)

.removeFirst : removeFirst
	java.lang.String [org.apache.commons.lang3.RegExUtils]  →  org.apache.commons.lang3.RegExUtils.removeFirst($expr$, $arg$)

.removePattern : removePattern
	java.lang.String [org.apache.commons.lang3.RegExUtils]  →  org.apache.commons.lang3.RegExUtils.removePattern($expr$, $arg$)

.removeAll : removeAll
	java.lang.String [org.apache.commons.lang3.RegExUtils]  →  org.apache.commons.lang3.RegExUtils.removeAll($expr$, $arg$)

.replaceAll : replaceAll
	java.lang.String [org.apache.commons.lang3.RegExUtils]  →  org.apache.commons.lang3.RegExUtils.replaceAll($expr$, $arg$)


## SerializationUtils

.clone : clone
	java.io.Serializable [org.apache.commons.lang3.SerializationUtils]  →  org.apache.commons.lang3.SerializationUtils.clone($expr$)

.serialize : serialize
	java.io.Serializable [org.apache.commons.lang3.SerializationUtils]  →  org.apache.commons.lang3.SerializationUtils.serialize($expr$, $arg$)

.roundtrip : roundtrip
	java.io.Serializable [org.apache.commons.lang3.SerializationUtils]  →  org.apache.commons.lang3.SerializationUtils.roundtrip($expr$)

.deserialize : deserialize
	ARRAY [org.apache.commons.lang3.SerializationUtils]  →  org.apache.commons.lang3.SerializationUtils.deserialize($expr$)
	java.io.InputStream [org.apache.commons.lang3.SerializationUtils]  →  org.apache.commons.lang3.SerializationUtils.deserialize($expr$)


## StringUtils

.equalsIgnoreCase : equalsIgnoreCase
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.equalsIgnoreCase($expr$, $arg$)

.isAllBlank : isAllBlank
	ARRAY [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.isAllBlank($expr$)

.isAlphanumeric : isAlphanumeric
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.isAlphanumeric($expr$)

.stripToNull : stripToNull
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.stripToNull($expr$)

.splitPreserveAllTokens : splitPreserveAllTokens
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.splitPreserveAllTokens($expr$, $arg$)

.isAlphaSpace : isAlphaSpace
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.isAlphaSpace($expr$)

.isAnyEmpty : isAnyEmpty
	ARRAY [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.isAnyEmpty($expr$)

.toEncodedString : toEncodedString
	ARRAY [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.toEncodedString($expr$, $arg$)

.replaceIgnoreCase : replaceIgnoreCase
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.replaceIgnoreCase($expr$, $arg$)

.isNumeric : isNumeric
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.isNumeric($expr$)

.indexOfAny : indexOfAny
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.indexOfAny($expr$, $arg$)

.replaceOnceIgnoreCase : replaceOnceIgnoreCase
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.replaceOnceIgnoreCase($expr$, $arg$)

.splitByWholeSeparatorPreserveAllTokens : splitByWholeSeparatorPreserveAllTokens
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens($expr$, $arg$)

.replace : replace
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.replace($expr$, $arg$)

.replaceEachRepeatedly : replaceEachRepeatedly
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.replaceEachRepeatedly($expr$, $arg$)

.valueOf : valueOf
	ARRAY [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.valueOf($expr$)

.isAllUpperCase : isAllUpperCase
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.isAllUpperCase($expr$)

.prependIfMissing : prependIfMissing
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.prependIfMissing($expr$, $arg$)

.join : join
	ARRAY [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.join($expr$, $arg$)
	java.util.List [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.join($expr$, $arg$)
	java.lang.Iterable [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.join($expr$, $arg$)
	java.util.Iterator [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.join($expr$, $arg$)

.splitByCharacterTypeCamelCase : splitByCharacterTypeCamelCase
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.splitByCharacterTypeCamelCase($expr$)

.abbreviate : abbreviate
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.abbreviate($expr$, $arg$)

.splitByWholeSeparator : splitByWholeSeparator
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.splitByWholeSeparator($expr$, $arg$)

.equals : equals
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.equals($expr$, $arg$)

.appendIfMissing : appendIfMissing
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.appendIfMissing($expr$, $arg$)

.normalizeSpace : normalizeSpace
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.normalizeSpace($expr$)

.toRootLowerCase : toRootLowerCase
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.toRootLowerCase($expr$)

.center : center
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.center($expr$, $arg$)

.startsWith : startsWith
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.startsWith($expr$, $arg$)

.overlay : overlay
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.overlay($expr$, $arg$)

.lastIndexOf : lastIndexOf
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.lastIndexOf($expr$, $arg$)

.isNotBlank : isNotBlank
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.isNotBlank($expr$)

.defaultIfEmpty : defaultIfEmpty
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.defaultIfEmpty($expr$, $arg$)

.lastIndexOfAny : lastIndexOfAny
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.lastIndexOfAny($expr$, $arg$)

.mid : mid
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.mid($expr$, $arg$)

.compareIgnoreCase : compareIgnoreCase
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.compareIgnoreCase($expr$, $arg$)

.isWhitespace : isWhitespace
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.isWhitespace($expr$)

.endsWithIgnoreCase : endsWithIgnoreCase
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.endsWithIgnoreCase($expr$, $arg$)

.capitalize : capitalize
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.capitalize($expr$)

.truncate : truncate
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.truncate($expr$, $arg$)

.indexOfIgnoreCase : indexOfIgnoreCase
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.indexOfIgnoreCase($expr$, $arg$)

.getCommonPrefix : getCommonPrefix
	ARRAY [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.getCommonPrefix($expr$)

.containsIgnoreCase : containsIgnoreCase
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.containsIgnoreCase($expr$, $arg$)

.left : left
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.left($expr$, $arg$)

.abbreviateMiddle : abbreviateMiddle
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.abbreviateMiddle($expr$, $arg$)

.removeEnd : removeEnd
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.removeEnd($expr$, $arg$)

.isNotEmpty : isNotEmpty
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.isNotEmpty($expr$)

.lastIndexOfIgnoreCase : lastIndexOfIgnoreCase
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase($expr$, $arg$)

.joinWith : joinWith
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.joinWith($expr$, $arg$)

.stripAll : stripAll
	ARRAY [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.stripAll($expr$, $arg$)

.containsNone : containsNone
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.containsNone($expr$, $arg$)

.reverseDelimited : reverseDelimited
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.reverseDelimited($expr$, $arg$)

.removeIgnoreCase : removeIgnoreCase
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.removeIgnoreCase($expr$, $arg$)

.isNumericSpace : isNumericSpace
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.isNumericSpace($expr$)

.equalsAnyIgnoreCase : equalsAnyIgnoreCase
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.equalsAnyIgnoreCase($expr$, $arg$)

.firstNonBlank : firstNonBlank
	ARRAY [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.firstNonBlank($expr$)

.chomp : chomp
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.chomp($expr$)

.strip : strip
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.strip($expr$, $arg$)

.startsWithIgnoreCase : startsWithIgnoreCase
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.startsWithIgnoreCase($expr$, $arg$)

.stripStart : stripStart
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.stripStart($expr$, $arg$)

.lowerCase : lowerCase
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.lowerCase($expr$, $arg$)

.defaultString : defaultString
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.defaultString($expr$, $arg$)

.getIfEmpty : getIfEmpty
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.getIfEmpty($expr$, $arg$)

.isBlank : isBlank
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.isBlank($expr$)

.containsAnyIgnoreCase : containsAnyIgnoreCase
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.containsAnyIgnoreCase($expr$, $arg$)

.isAlpha : isAlpha
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.isAlpha($expr$)

.unwrap : unwrap
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.unwrap($expr$, $arg$)

.reverse : reverse
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.reverse($expr$)

.wrapIfMissing : wrapIfMissing
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.wrapIfMissing($expr$, $arg$)

.rotate : rotate
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.rotate($expr$, $arg$)

.uncapitalize : uncapitalize
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.uncapitalize($expr$)

.upperCase : upperCase
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.upperCase($expr$, $arg$)

.ordinalIndexOf : ordinalIndexOf
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.ordinalIndexOf($expr$, $arg$)

.getDigits : getDigits
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.getDigits($expr$)

.endsWith : endsWith
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.endsWith($expr$, $arg$)

.leftPad : leftPad
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.leftPad($expr$, $arg$)

.substringBetween : substringBetween
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.substringBetween($expr$, $arg$)

.indexOfAnyBut : indexOfAnyBut
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.indexOfAnyBut($expr$, $arg$)

.substringAfter : substringAfter
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.substringAfter($expr$, $arg$)

.wrap : wrap
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.wrap($expr$, $arg$)

.startsWithAny : startsWithAny
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.startsWithAny($expr$, $arg$)

.endsWithAny : endsWithAny
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.endsWithAny($expr$, $arg$)

.isNoneEmpty : isNoneEmpty
	ARRAY [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.isNoneEmpty($expr$)

.chop : chop
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.chop($expr$)

.remove : remove
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.remove($expr$, $arg$)

.toRootUpperCase : toRootUpperCase
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.toRootUpperCase($expr$)

.replaceEach : replaceEach
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.replaceEach($expr$, $arg$)

.substringsBetween : substringsBetween
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.substringsBetween($expr$, $arg$)

.removeStartIgnoreCase : removeStartIgnoreCase
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.removeStartIgnoreCase($expr$, $arg$)

.firstNonEmpty : firstNonEmpty
	ARRAY [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.firstNonEmpty($expr$)

.isAsciiPrintable : isAsciiPrintable
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.isAsciiPrintable($expr$)

.isAllLowerCase : isAllLowerCase
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.isAllLowerCase($expr$)

.getIfBlank : getIfBlank
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.getIfBlank($expr$, $arg$)

.split : split
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.split($expr$, $arg$)

.indexOfDifference : indexOfDifference
	ARRAY [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.indexOfDifference($expr$)
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.indexOfDifference($expr$, $arg$)

.countMatches : countMatches
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.countMatches($expr$, $arg$)

.removeEndIgnoreCase : removeEndIgnoreCase
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.removeEndIgnoreCase($expr$, $arg$)

.getBytes : getBytes
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.getBytes($expr$, $arg$)

.defaultIfBlank : defaultIfBlank
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.defaultIfBlank($expr$, $arg$)

.toCodePoints : toCodePoints
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.toCodePoints($expr$)

.equalsAny : equalsAny
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.equalsAny($expr$, $arg$)

.containsOnly : containsOnly
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.containsOnly($expr$, $arg$)

.substringBeforeLast : substringBeforeLast
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.substringBeforeLast($expr$, $arg$)

.stripToEmpty : stripToEmpty
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.stripToEmpty($expr$)

.substringBefore : substringBefore
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.substringBefore($expr$, $arg$)

.length : length
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.length($expr$)

.isMixedCase : isMixedCase
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.isMixedCase($expr$)

.isNoneBlank : isNoneBlank
	ARRAY [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.isNoneBlank($expr$)

.splitByCharacterType : splitByCharacterType
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.splitByCharacterType($expr$)

.stripAccents : stripAccents
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.stripAccents($expr$)

.substring : substring
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.substring($expr$, $arg$)

.isAlphanumericSpace : isAlphanumericSpace
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.isAlphanumericSpace($expr$)

.repeat : repeat
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.repeat($expr$, $arg$)
	CHAR [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.repeat($expr$, $arg$)

.prependIfMissingIgnoreCase : prependIfMissingIgnoreCase
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.prependIfMissingIgnoreCase($expr$, $arg$)

.substringAfterLast : substringAfterLast
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.substringAfterLast($expr$, $arg$)

.trim : trim
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.trim($expr$)

.contains : contains
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.contains($expr$, $arg$)

.stripEnd : stripEnd
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.stripEnd($expr$, $arg$)

.isEmpty : isEmpty
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.isEmpty($expr$)

.appendIfMissingIgnoreCase : appendIfMissingIgnoreCase
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.appendIfMissingIgnoreCase($expr$, $arg$)

.replaceOnce : replaceOnce
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.replaceOnce($expr$, $arg$)

.replaceChars : replaceChars
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.replaceChars($expr$, $arg$)

.difference : difference
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.difference($expr$, $arg$)

.rightPad : rightPad
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.rightPad($expr$, $arg$)

.removeStart : removeStart
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.removeStart($expr$, $arg$)

.containsWhitespace : containsWhitespace
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.containsWhitespace($expr$)

.indexOf : indexOf
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.indexOf($expr$, $arg$)

.isAllEmpty : isAllEmpty
	ARRAY [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.isAllEmpty($expr$)

.swapCase : swapCase
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.swapCase($expr$)

.trimToEmpty : trimToEmpty
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.trimToEmpty($expr$)

.compare : compare
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.compare($expr$, $arg$)

.lastOrdinalIndexOf : lastOrdinalIndexOf
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf($expr$, $arg$)

.containsAny : containsAny
	java.lang.CharSequence [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.containsAny($expr$, $arg$)

.right : right
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.right($expr$, $arg$)

.trimToNull : trimToNull
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.trimToNull($expr$)

.isAnyBlank : isAnyBlank
	ARRAY [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.isAnyBlank($expr$)

.deleteWhitespace : deleteWhitespace
	java.lang.String [org.apache.commons.lang3.StringUtils]  →  org.apache.commons.lang3.StringUtils.deleteWhitespace($expr$)


## SystemUtils

.getEnvironmentVariable : getEnvironmentVariable
	java.lang.String [org.apache.commons.lang3.SystemUtils]  →  org.apache.commons.lang3.SystemUtils.getEnvironmentVariable($expr$, $arg$)

.getUserName : getUserName
	java.lang.String [org.apache.commons.lang3.SystemUtils]  →  org.apache.commons.lang3.SystemUtils.getUserName($expr$)

.isJavaVersionAtLeast : isJavaVersionAtLeast
	org.apache.commons.lang3.JavaVersion [org.apache.commons.lang3.SystemUtils]  →  org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast($expr$)

.isJavaVersionAtMost : isJavaVersionAtMost
	org.apache.commons.lang3.JavaVersion [org.apache.commons.lang3.SystemUtils]  →  org.apache.commons.lang3.SystemUtils.isJavaVersionAtMost($expr$)


## ThreadUtils

.findThreadById : findThreadById
	LONG [org.apache.commons.lang3.ThreadUtils]  →  org.apache.commons.lang3.ThreadUtils.findThreadById($expr$, $arg$)

.findThreads : findThreads
	org.apache.commons.lang3.ThreadUtils.ThreadPredicate [org.apache.commons.lang3.ThreadUtils]  →  org.apache.commons.lang3.ThreadUtils.findThreads($expr$)
	java.lang.ThreadGroup [org.apache.commons.lang3.ThreadUtils]  →  org.apache.commons.lang3.ThreadUtils.findThreads($expr$, $arg$)

.join : join
	java.lang.Thread [org.apache.commons.lang3.ThreadUtils]  →  org.apache.commons.lang3.ThreadUtils.join($expr$, $arg$)

.findThreadGroups : findThreadGroups
	java.lang.ThreadGroup [org.apache.commons.lang3.ThreadUtils]  →  org.apache.commons.lang3.ThreadUtils.findThreadGroups($expr$, $arg$)
	org.apache.commons.lang3.ThreadUtils.ThreadGroupPredicate [org.apache.commons.lang3.ThreadUtils]  →  org.apache.commons.lang3.ThreadUtils.findThreadGroups($expr$)

.sleep : sleep
	java.time.Duration [org.apache.commons.lang3.ThreadUtils]  →  org.apache.commons.lang3.ThreadUtils.sleep($expr$)

.findThreadsByName : findThreadsByName
	java.lang.String [org.apache.commons.lang3.ThreadUtils]  →  org.apache.commons.lang3.ThreadUtils.findThreadsByName($expr$, $arg$)

.findThreadGroupsByName : findThreadGroupsByName
	java.lang.String [org.apache.commons.lang3.ThreadUtils]  →  org.apache.commons.lang3.ThreadUtils.findThreadGroupsByName($expr$)

