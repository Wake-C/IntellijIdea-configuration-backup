## collection conversions ##

.toArray : convert to array
	java.util.Collection  →  $expr$.toArray(new $arrayType:guessElementType(expr)):"Object"$[0])

.toList : convert to List
	ARRAY                    →  java.util.Arrays.asList($expr$)
	java.util.Collection     →  new java.util.ArrayList<>($expr$)
	java.lang.Iterable       →  java.util.stream.StreamSupport.stream($expr$.spliterator(), false).collect(java.util.stream.Collectors.toList())
	java.util.Enumeration    →  java.util.Collections.list($expr$)
	java.util.Map            →  new ArrayList<>($expr$.entrySet())
	java.util.Optional       →  $expr$.map(e -> java.util.Collections.singletonList(e)).orElse(java.util.Collections.emptyList())
	java.util.stream.Stream  →  $expr$.collect(java.util.stream.Collectors.toList())
	NON_VOID                 →  java.util.Collections.singletonList($expr$) [USE_STATIC_IMPORTS]

.toSet : convert to Set
	ARRAY                    →  java.util.stream.Stream.of($expr$).collect(java.util.stream.Collectors.toSet())
	java.util.Collection     →  new java.util.HashSet<>($expr$)
	java.lang.Iterable       →  java.util.stream.StreamSupport.stream($expr$.spliterator(), false).collect(java.util.stream.Collectors.toSet())
	java.util.Enumeration    →  new java.util.HashSet<>(java.util.Collections.list($expr$))
	java.util.Map            →  $expr$.entrySet()
	java.util.Optional       →  $expr$.map(e -> java.util.Collections.singleton(e)).orElse(java.util.Collections.emptySet())
	java.util.stream.Stream  →  $expr$.collect(java.util.stream.Collectors.toSet())
	NON_VOID                 →  java.util.Collections.singleton($expr$) [USE_STATIC_IMPORTS]

.toMap : convert to Map
	ARRAY                    →  java.util.Arrays.stream($expr$).collect(java.util.stream.Collectors.toMap(e -> $key$, e -> $value$))
	java.util.Collection     →  $expr$.stream().collect(java.util.stream.Collectors.toMap(e -> $key$, e -> $value$))
	java.lang.Iterable       →  java.util.stream.StreamSupport.stream($expr$.spliterator(), false).collect(java.util.stream.Collectors.toMap(e -> $key$, e -> $value$))
	java.util.stream.Stream  →  $expr$.collect(java.util.stream.Collectors.toMap(e -> $key$, e -> $value$))
	java.util.Map            →  $expr$.entrySet().stream().collect(java.util.stream.Collectors.toMap(e -> $key$, e -> $value$))

.toOptional : wrap in Otional
	NON_VOID                 →  Optional.ofNullable($expr$)

.stream : convert to Stream
	java.lang.Iterable       →  java.util.stream.StreamSupport.stream($expr$.spliterator(), false)
	java.util.Iterator       →  java.util.stream.StreamSupport.stream(java.util.Spliterators.spliteratorUnknownSize($expr$, Spliterator.ORDERED | Spliterator.NONNULL), false)



## collection iterations ##

.for : iterate over ...
	ITERABLE_OR_ARRAY → for ($ELEMENT_TYPE:iterableComponentType(expr):"java.lang.Object"$ $VAR:suggestVariableName()$ : $expr$) {\
	  $END$\
	}
	java.util.Enumeration → while($expr$.hasMoreElements()) {\
	  $TYPE:rightSideType():"Object"$ $VAR:suggestVariableName()$ = $CAST*:castToLeftSideType()$ $expr$.nextElement();\
	  $END$\
	}
	java.util.Iterator → while($expr$.hasNext()) {\
	  $TYPE:rightSideType():"Object"$ $VAR:suggestVariableName()$ = $CAST*:castToLeftSideType()$ $expr$.next();\
	  $END$\
	}

.iter : iterate over ...
	ITERABLE_OR_ARRAY → for ($ELEMENT_TYPE:iterableComponentType(expr):"java.lang.Object"$ $VAR:suggestVariableName()$ : $expr$) {\
	  $END$\
	}
	java.util.Enumeration → while($expr$.hasMoreElements()) {\
	  $TYPE:rightSideType():"Object"$ $VAR:suggestVariableName()$ = $CAST*:castToLeftSideType()$ $expr$.nextElement();\
	  $END$\
	}
	java.util.Iterator → while($expr$.hasNext()) {\
	  $TYPE:rightSideType():"Object"$ $VAR:suggestVariableName()$ = $CAST*:castToLeftSideType()$ $expr$.next();\
	  $END$\
	}



## collection operations ##

.sort : sort naturally
	ARRAY                    →  java.util.Arrays.sort($expr$)
	java.util.List           →  java.util.Collections.sort($expr$)

.sortBy : sort by attribute
	ARRAY                    →  java.util.Arrays.sort($expr$, java.util.Comparator.comparing($attributeVar:suggestShortVariableName()$ -> $attribute$))
	java.util.List           →  $expr$.sort(java.util.Comparator.comparing($attributeVar:suggestShortVariableName()$ -> $attribute$))
	java.util.stream.Stream  →  $expr$.sorted(java.util.Comparator.comparing($attributeVar:suggestShortVariableName()$ -> $attribute$))

.minBy : minimum by attribute
	ARRAY                    →  java.util.Arrays.stream($expr$).min(java.util.Comparator.comparing($attributeVar:suggestShortVariableName()$ -> $attribute$))
	java.util.Collection     →  $expr$.stream().min(java.util.Comparator.comparing($attributeVar:suggestShortVariableName()$ -> $attribute$))
	java.lang.Iterable       →  java.util.stream.StreamSupport.stream($expr$.spliterator(), false).min(java.util.Comparator.comparing($attributeVar:suggestShortVariableName()$ -> $attribute$))
	java.util.stream.Stream  →  $expr$.min(java.util.Comparator.comparing($attributeVar:suggestShortVariableName()$ -> $attribute$))

.maxBy : maximum by attribute
	ARRAY                    →  java.util.Arrays.stream($expr$).max(java.util.Comparator.comparing($attributeVar:suggestShortVariableName()$ -> $attribute$))
	java.util.Collection     →  $expr$.stream().max(java.util.Comparator.comparing($attributeVar:suggestShortVariableName()$ -> $attribute$))
	java.lang.Iterable       →  java.util.stream.StreamSupport.stream($expr$.spliterator(), false).max(java.util.Comparator.comparing($attributeVar:suggestShortVariableName()$ -> $attribute$))
	java.util.stream.Stream  →  $expr$.max(java.util.Comparator.comparing($attributeVar:suggestShortVariableName()$ -> $attribute$))

.groupBy : group by attribute
	ARRAY                    →  java.util.Arrays.stream($expr$).collect(java.util.stream.Collectors.groupingBy($attributeVar:suggestShortVariableName()$ -> $attribute$))
	java.util.Collection     →  $expr$.stream().collect(java.util.stream.Collectors.groupingBy($attributeVar:suggestShortVariableName()$ -> $attribute$))
	java.lang.Iterable       →  java.util.stream.StreamSupport.stream($expr$.spliterator(), false).collect(java.util.stream.Collectors.groupingBy($attributeVar:suggestShortVariableName()$ -> $attribute$))
	java.util.stream.Stream  →  $expr$.collect(java.util.stream.Collectors.groupingBy($attributeVar:suggestShortVariableName()$ -> $attribute$))

.exists : any match
	ARRAY                    →  java.util.Arrays.stream($expr$).anyMatch($conditionVar:suggestShortVariableName()$ -> $condition$)
	java.util.Collection     →  $expr$.stream().anyMatch($conditionVar:suggestShortVariableName()$ -> $condition$)
	java.lang.Iterable       →  java.util.stream.StreamSupport.stream($expr$.spliterator(), false).anyMatch($conditionVar:suggestShortVariableName()$ -> $condition$)
	java.util.stream.Stream  →  $expr$.anyMatch($conditionVar:suggestShortVariableName()$ -> $condition$)

.forall : all match
	ARRAY                    →  java.util.Arrays.stream($expr$).allMatch($conditionVar:suggestShortVariableName()$ -> $condition$)
	java.util.Collection     →  $expr$.stream().allMatch($conditionVar:suggestShortVariableName()$ -> $condition$)
	java.lang.Iterable       →  java.util.stream.StreamSupport.stream($expr$.spliterator(), false).allMatch($conditionVar:suggestShortVariableName()$ -> $condition$)
	java.util.stream.Stream  →  $expr$.allMatch($conditionVar:suggestShortVariableName()$ -> $condition$)

.reverse : reverse collection
	ARRAY [org.apache.commons.lang.ArrayUtils] →  org.apache.commons.lang.ArrayUtils.reverse($expr$)
	java.util.List           →  java.util.Collections.reverse($expr$)
	java.lang.String         →  new StringBuilder($expr$).reverse().toString()

.concat : concat
	ARRAY                    →  java.util.stream.Stream.concat(java.util.Arrays.stream($expr$), $stream$)
	java.util.Collection     →  java.util.stream.Stream.concat($expr$.stream(), $stream$)
	java.util.stream.Stream  →  java.util.stream.Stream.concat($expr$, $stream$)

.forEach : for each
	ARRAY                    →  java.util.Arrays.stream($expr$).forEach($actionVar:suggestShortVariableName()$ -> $END$)
	java.util.Optional       →  $expr$.ifPresent($actionVar:suggestShortVariableName()$ -> $END$)

.join : joins strings/elements together
	ARRAY                    →  java.util.Arrays.stream($expr$).collect(java.util.stream.Collectors.joining($separator$))
	java.lang.Iterable       →  String.join($separator::"\", \""$, $expr$)
	java.util.stream.Stream  →  $expr$.collect(java.util.stream.Collectors.joining($separator$))

.mkString : joins strings/elements together
	ARRAY                    →  java.util.Arrays.stream($expr$).collect(java.util.stream.Collectors.joining($separator$))
	java.util.Collection     →  $expr$.stream().collect(java.util.stream.Collectors.joining($separator$))
	java.lang.Iterable       →  java.util.stream.StreamSupport.stream($expr$.spliterator(), false).collect(java.util.stream.Collectors.joining($separator$))
	java.util.stream.Stream  →  $expr$.collect(java.util.stream.Collectors.joining($separator$))

.toString : convert to String
	ARRAY                    →  java.util.Arrays.toString($expr$)

.map : map entries
	java.util.List           →  $expr$.stream().map($fVar:suggestShortVariableName()$ -> $f$).collect(java.util.stream.Collectors.toList())
	java.util.Set            →  $expr$.stream().map($fVar:suggestShortVariableName()$ -> $f$).collect(java.util.stream.Collectors.toSet())
	java.util.Map            →  $expr$.entrySet().stream().collect(java.util.stream.Collectors.toMap(e -> $key$, e -> $value$))

.flatMap : flat map entries
	java.util.List           →  $expr$.stream().flatMap($fVar:suggestShortVariableName()$ -> $f$).collect(java.util.stream.Collectors.toList())
	java.util.Set            →  $expr$.stream().flatMap($fVar:suggestShortVariableName()$ -> $f$).collect(java.util.stream.Collectors.toSet())

.mapKeys : map keys
	java.util.Map            →  $expr$.entrySet().stream().collect(java.util.stream.Collectors.toMap(e -> $key$, e -> e.getValue()))

.mapValues : map values
	java.util.Map            →  $expr$.entrySet().stream().collect(java.util.stream.Collectors.toMap(e -> e.getKey(), e -> $value$))

.getOrElseUpdate : get or else update
	java.util.Map            →  $expr$.computeIfAbsent($key$, e -> $value$)

.filter : filter map entries
	java.util.List           →  $expr$.stream().filter($conditionVar:suggestShortVariableName()$ -> $condition$).collect(java.util.stream.Collectors.toList())
	java.util.Set            →  $expr$.stream().filter($conditionVar:suggestShortVariableName()$ -> $condition$).collect(java.util.stream.Collectors.toSet())
	java.util.Map            →  $expr$.entrySet().stream().filter($conditionVar:suggestShortVariableName()$ -> $condition$).collect(java.util.stream.Collectors.toMap(e -> e.getKey(), e -> e.getValue()))
	java.lang.Iterable       →  java.util.stream.StreamSupport.stream($expr$.spliterator(), false).collect(java.util.stream.Collectors.toList())

.reduce : reduce
	ARRAY                    →  java.util.Arrays.stream($expr$).reduce((a, b) -> $accumulator$)
	java.util.Collection     →  $expr$.stream().reduce((a, b) -> $accumulator$)
	java.lang.Iterable       →  java.util.stream.StreamSupport.stream($expr$.spliterator(), false).reduce((a, b) -> $accumulator$)

.fold : fold
	ARRAY                    →  java.util.Arrays.stream($expr$).reduce($neutralElement$, (a, b) -> $accumulator$)
	java.util.Collection     →  $expr$.stream().reduce($neutralElement$, (a, b) -> $accumulator$)
	java.lang.Iterable       →  java.util.stream.StreamSupport.stream($expr$.spliterator(), false).reduce($neutralElement$, (a, b) -> $accumulator$)
	java.util.stream.Stream  →  $expr$.reduce($neutralElement$, (a, b) -> $accumulator$)

.find : find element
	ARRAY                    →  java.util.Arrays.stream($expr$).filter($conditionVar:suggestShortVariableName()$ -> $condition$).findFirst()
	java.util.Collection     →  $expr$.stream().filter($conditionVar:suggestShortVariableName()$ -> $condition$).findFirst()
	java.lang.Iterable       →  java.util.stream.StreamSupport.stream($expr$.spliterator(), false).filter($conditionVar:suggestShortVariableName()$ -> $condition$).findFirst()
	java.util.stream.Stream  →  $expr$.filter($conditionVar:suggestShortVariableName()$ -> $condition$).findFirst()

.take : take a certain number of elements
	java.util.stream.Stream  →  $expr$.limit($intValue$)

.drop : drop a certain number of elements
	java.util.stream.Stream  →  $expr$.skip($intValue$)

.size : size of collection
	ARRAY                    →  $expr$.length

.get : get element
	ARRAY                    →  $expr$[$i$]

.head : get first element
	ARRAY                    →  $expr$[0]
	java.util.List           →  $expr$.get(0)

.first : get first element
	ARRAY                    →  $expr$[0]
	java.util.List           →  $expr$.get(0)

.last : get last element
	ARRAY                    →  $expr$[$expr$.length-1]
	java.util.List           →  $expr$.get($expr$.size()-1)
