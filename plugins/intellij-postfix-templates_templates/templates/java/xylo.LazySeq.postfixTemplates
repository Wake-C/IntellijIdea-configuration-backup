## shortcuts for static imports ##

.ls : create LazySeq
	ANY [de.endrullis.lazyseq.LazySeq]  →  [USE_STATIC_IMPORTS] iat.utils.javaScala.StaticImports.ls($expr$)

.lts : create LazyTupleSeq
	ITERABLE_OR_ARRAY [de.endrullis.lazyseq.LazySeq]  →  [USE_STATIC_IMPORTS] iat.utils.javaScala.StaticImports.lts($expr$)
	java.util.Iterator [de.endrullis.lazyseq.LazySeq]  →  [USE_STATIC_IMPORTS] iat.utils.javaScala.StaticImports.lts($expr$)
	java.util.Map [de.endrullis.lazyseq.LazySeq]  →  [USE_STATIC_IMPORTS] iat.utils.javaScala.StaticImports.lts($expr$)
	de.endrullis.lazyseq.Tuple  →  [USE_STATIC_IMPORTS] iat.utils.javaScala.StaticImports.lts($expr$)


## refine/deactivate collection templates ##

.sort : sort naturally
	de.endrullis.lazyseq.LazySeq  →  [SKIP]

.sortBy : sort by attribute
	de.endrullis.lazyseq.LazySeq  →  [SKIP]

.minBy : minimum by attribute
	de.endrullis.lazyseq.LazySeq  →  [SKIP]

.maxBy : maximum by attribute
	de.endrullis.lazyseq.LazySeq  →  [SKIP]

.groupBy : group by attribute
	de.endrullis.lazyseq.LazySeq  →  [SKIP]

.exists : any match
	de.endrullis.lazyseq.LazySeq  →  [SKIP]

.forall : all match
	de.endrullis.lazyseq.LazySeq  →  [SKIP]

.reverse : reverse collection
	de.endrullis.lazyseq.LazySeq  →  [SKIP]

.concat : concat
	de.endrullis.lazyseq.LazySeq  →  [SKIP]

.mkString : make a string
	de.endrullis.lazyseq.LazySeq  →  [SKIP]

.map : map entries
	de.endrullis.lazyseq.LazySeq  →  [SKIP]

.flatMap : map entries
	de.endrullis.lazyseq.LazySeq  →  [SKIP]

.filter : filter map entries
	de.endrullis.lazyseq.LazySeq  →  [SKIP]

.reduce : reduce
	de.endrullis.lazyseq.LazySeq  →  [SKIP]

.fold : fold
	de.endrullis.lazyseq.LazySeq  →  $expr$.reduce($neutralElement$, (a, b) -> $accumulator$)

.find : find element
	de.endrullis.lazyseq.LazySeq  →  [SKIP]

.head : find element
	de.endrullis.lazyseq.LazySeq  →  [SKIP]

.first : find element
	de.endrullis.lazyseq.LazySeq  →  $expr$.head()
