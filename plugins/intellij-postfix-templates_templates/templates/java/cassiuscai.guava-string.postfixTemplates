# Templates for guava string utils ref: https://github.com/google/guava/wiki/StringsExplained
.join : guava joining together a sequence of strings with a separator
    ARRAY                           [com.google.common.base.Joiner]         →  com.google.common.base.Joiner.on($separator$).join($expr$)
    java.lang.Iterable              [com.google.common.base.Joiner]         →  com.google.common.base.Joiner.on($separator$).join($expr$)
    java.util.Map                   [com.google.common.base.Joiner]         →  com.google.common.base.Joiner.on($separator$).withKeyValueSeparator($keyValueSeparator$).useForNull($nullReplacement$).join($expr$)

.joinSkipNulls : guava joining together a sequence of strings with a separator and skip null values
    ARRAY                           [com.google.common.base.Joiner]         →  com.google.common.base.Joiner.on($separator$).skipNulls().join($expr$)
    java.lang.Iterable              [com.google.common.base.Joiner]         →  com.google.common.base.Joiner.on($separator$).skipNulls().join($expr$)

.joinReplaceNull : guava joining together a sequence of strings with a separator and replace null values
    ARRAY                           [com.google.common.base.Joiner]         →  com.google.common.base.Joiner.on($separator$).useForNull($nullReplacement$).join($expr$)
    java.lang.Iterable              [com.google.common.base.Joiner]         →  com.google.common.base.Joiner.on($separator$).useForNull($nullReplacement$).join($expr$)
    java.util.Map                   [com.google.common.base.Joiner]         →  com.google.common.base.Joiner.on($separator$).withKeyValueSeparator($keyValueSeparator$).useForNull($nullReplacement$).join($expr$)


# split to array
.split : guava splitting strings with a separator
    java.lang.String                [com.google.common.base.Splitter]       →  com.google.common.base.Splitter.on($separator$).trimResults().omitEmptyStrings().split($expr$)

.splitByRegexp : guava splitting strings with a regexp pattern
    java.lang.String                [com.google.common.base.Splitter]       →  com.google.common.base.Splitter.onPattern($regexp$).trimResults().omitEmptyStrings().split($expr$)

.splitToFixedLength : guava splitting strings into substrings of the specified fixed length
    java.lang.String                [com.google.common.base.Splitter]       →  com.google.common.base.Splitter.fixedLength($length$).split($expr$)

.splitWithLimitSize : guava splitting strings into substrings with result size limited
    java.lang.String                [com.google.common.base.Splitter]       →  com.google.common.base.Splitter.on($separator$).limit($size$).split($expr$)

# split to list
.splitToList : guava splitting strings to list with a separator
    java.lang.String                [com.google.common.base.Splitter]       →  com.google.common.base.Splitter.on($separator$).trimResults().omitEmptyStrings().splitToList($expr$)

.splitToListByRegexp : guava splitting strings to list with a regexp pattern
    java.lang.String                [com.google.common.base.Splitter]       →  com.google.common.base.Splitter.onPattern($regexp$).trimResults().omitEmptyStrings().splitToList($expr$)

.splitToListWithFixedLength : guava splitting strings into list of substrings of the specified fixed length
    java.lang.String                [com.google.common.base.Splitter]       →  com.google.common.base.Splitter.fixedLength($length$).splitToList($expr$)

.splitToListWithLimitSize : guava splitting strings into list of substrings with result size limited
    java.lang.String                [com.google.common.base.Splitter]       →  com.google.common.base.Splitter.on($separator$).limit($size$).splitToList($expr$)


# split to map
.splitToMap : guava splitting strings to map with a separator
    java.lang.String                [com.google.common.base.Splitter]       →  com.google.common.base.Splitter.on($separator$).trimResults().omitEmptyStrings().withKeyValueSeparator($keyValueSeparator$).split($expr$)

.splitToMapByRegexp : guava splitting strings to map with a regexp pattern
    java.lang.String                [com.google.common.base.Splitter]       →  com.google.common.base.Splitter.onPattern($regexp$).trimResults().omitEmptyStrings().withKeyValueSeparator($keyValueSeparator$).split($expr$)

# Strings.repeat
.repeat : returns a string consisting of a specific number of concatenated copies of an input string
    java.lang.String                [com.google.common.base.Strings]        →   com.google.common.base.Strings.repeat($expr$, $times$)

# Strings.padding
.padStart : padding the start of a string with a padding char
    java.lang.String                [com.google.common.base.Strings]        →   com.google.common.base.Strings.padStart($expr$, $minLength$, $padChar$)

.padEnd : padding the end of a string with a padding char
    java.lang.String                [com.google.common.base.Strings]        →   com.google.common.base.Strings.padEnd($expr$, $minLength$, $padChar$)

# Strings null empty convert
.nullToEmpty : returns the given string if it is non-null; the empty string otherwise
    java.lang.String                [com.google.common.base.Strings]        →   com.google.common.base.Strings.nullToEmpty($expr$)

.emptyToNull : returns the given string if it is nonempty null otherwise
    java.lang.String                [com.google.common.base.Strings]        →   com.google.common.base.Strings.emptyToNull($expr$)

# CharMatcher.breakingWhitespace()
.formatToOneLine : format multiple lines text to on one line with a space
    java.lang.String                [com.google.common.base.CharMatcher]    →   com.google.common.base.CharMatcher.breakingWhitespace().replaceFrom($expr$, ' ')

# CharMatcher.whitespace()
.removeExtraWhitespace : remove multiple consecutive tabs and spaces and collapse them into single spaces
    java.lang.String                [com.google.common.base.CharMatcher]    →   com.google.common.base.CharMatcher.whitespace().trimAndCollapseFrom($expr$, ' ')

.removeWhitespace : remove all white space from the string
    java.lang.String                [com.google.common.base.CharMatcher]    →   com.google.common.base.CharMatcher.whitespace().removeFrom($expr$)

.trimWhitespace : remove leading and trailing whitespace
    java.lang.String                [com.google.common.base.CharMatcher]    →   com.google.common.base.CharMatcher.whitespace().trimFrom($expr$)

.replaceWhitespace : replace white space
    java.lang.String                [com.google.common.base.CharMatcher]    →   com.google.common.base.CharMatcher.whitespace().replaceFrom($expr$, $replace$)
